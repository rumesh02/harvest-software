import React, { useEffect, useState } from "react";
import { useAuth0 } from "@auth0/auth0-react";
import { getBookingsForTransporter } from "../../services/api";
import axios from "axios";
import {
  Container,
  Paper,
  Typography,
  Box,
  Card,
  CardContent,
  Button,
  Grid,
  Chip,
  Divider,
  Alert,
  IconButton,
  Avatar,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  Fade,
  CircularProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions
} from '@mui/material';
import {
  LocalShipping as TruckIcon,
  Person as PersonIcon,
  Phone as PhoneIcon,
  LocationOn as LocationIcon,
  Inventory as InventoryIcon,
  Scale as WeightIcon,
  Notifications as NotificationsIcon,
  Route as RouteIcon,
  CheckCircle as CheckIcon,
  Schedule as ScheduleIcon,
  Assignment as BookingIcon,
  Map as MapIcon,
  Cancel as RejectIcon,
  OpenInNew as OpenIcon,
  Close as CloseIcon
} from '@mui/material/icons';
import { GoogleMap, Marker } from '@react-google-maps/api';
import { useGoogleMaps } from '../../config/GoogleMapsProvider';

export const formatPickupLocations = (selectedItems) => {
  if (!selectedItems || selectedItems.length === 0) {
    return "Pick-up Locations:\nNo items selected.";
  }
  
  let output = "Pick-up Locations:\n";
  
  selectedItems.forEach((item, index) => {
    const itemName = item.name || item.item || item.productName || "Unknown Item";
    const location = item.pickupLocation || item.location || "Location not available";
    output += `${index + 1}. ${itemName} - ${location}\n`;
  });
  
  return output.trim();
};

// Map modal component to show pickup locations with red markers
const PickupLocationsMapModal = ({ open, onClose, pickupLocations, title }) => {
  const { isLoaded } = useGoogleMaps();
  const [mapMarkers, setMapMarkers] = useState([]);
  const [mapCenter, setMapCenter] = useState({ lat: 6.9271, lng: 79.8612 }); // Default to Colombo

  useEffect(() => {
    if (open && pickupLocations && pickupLocations.length > 0) {
      // Parse locations and create markers
      const markers = [];
      
      pickupLocations.forEach((locationInfo, index) => {
        if (locationInfo.includes(' - ')) {
          const parts = locationInfo.split(' - ');
          const itemName = parts[0].replace(/^\d+\.\s*/, ''); // Remove number prefix
          const locationText = parts.slice(1).join(' - ');
          
          if (locationText && locationText !== 'Location not available') {
            // For demo purposes, we'll use the Geocoding API or mock coordinates
            // In a real app, you'd geocode the address to get lat/lng
            // For now, using mock coordinates around Sri Lanka
            const mockCoords = getMockCoordinates(index, locationText);
            
            markers.push({
              id: index,
              position: mockCoords,
              title: `${itemName}`,
              address: locationText
            });
          }
        }
      });
      
      setMapMarkers(markers);
      
      // Set map center to first valid location or default
      if (markers.length > 0) {
        setMapCenter(markers[0].position);
      }
    }
  }, [open, pickupLocations]);

  // Mock function to generate coordinates (in real app, use geocoding)
  const getMockCoordinates = (index, locationText) => {
    // Mock coordinates around Sri Lanka for demonstration
    const sriLankaRegions = [
      { lat: 6.9271, lng: 79.8612 }, // Colombo
      { lat: 7.2906, lng: 80.6337 }, // Kandy
      { lat: 6.0535, lng: 80.2210 }, // Galle
      { lat: 8.3114, lng: 80.4037 }, // Anuradhapura
      { lat: 7.9553, lng: 81.0188 }, // Polonnaruwa
    ];
    
    const baseCoord = sriLankaRegions[index % sriLankaRegions.length];
    
    // Add small random offset to avoid markers overlapping
    return {
      lat: baseCoord.lat + (Math.random() - 0.5) * 0.1,
      lng: baseCoord.lng + (Math.random() - 0.5) * 0.1
    };
  };

  if (!isLoaded) {
    return (
      <Dialog open={open} onClose={onClose} maxWidth="md" fullWidth>
        <DialogContent sx={{ textAlign: 'center', py: 4 }}>
          <CircularProgress />
          <Typography sx={{ mt: 2 }}>Loading map...</Typography>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={open} onClose={onClose} maxWidth="lg" fullWidth>
      <DialogTitle sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center',
        bgcolor: 'primary.main',
        color: 'white'
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <LocationIcon />
          <Typography variant="h6">
            {title || 'Pickup Locations Map'}
          </Typography>
        </Box>
        <IconButton onClick={onClose} sx={{ color: 'white' }}>
          <CloseIcon />
        </IconButton>
      </DialogTitle>
      
      <DialogContent sx={{ p: 0 }}>
        <Box sx={{ height: 500, width: '100%' }}>
          <GoogleMap
            mapContainerStyle={{ width: '100%', height: '100%' }}
            zoom={mapMarkers.length > 1 ? 8 : 10}
            center={mapCenter}
            options={{
              disableDefaultUI: false,
              zoomControl: true,
              mapTypeControl: true,
              streetViewControl: false,
              fullscreenControl: true,
            }}
          >
            {mapMarkers.map((marker) => (
              <Marker
                key={marker.id}
                position={marker.position}
                title={`${marker.title}\n${marker.address}`}
                icon={{
                  url: 'http://maps.google.com/mapfiles/ms/icons/red-dot.png',
                  scaledSize: new window.google.maps.Size(32, 32)
                }}
              />
            ))}
          </GoogleMap>
        </Box>
      </DialogContent>
      
      <DialogActions sx={{ px: 3, py: 2, bgcolor: 'grey.50' }}>
        <Box sx={{ flex: 1 }}>
          <Typography variant="body2" color="text.secondary">
            üìç Showing {mapMarkers.length} pickup location{mapMarkers.length !== 1 ? 's' : ''} with red markers
          </Typography>
        </Box>
        <Button onClick={onClose} variant="contained" startIcon={<CloseIcon />}>
          Close
        </Button>
      </DialogActions>
    </Dialog>
  );
};

const Bookings = () => {
  const { user } = useAuth0();
  const [bookings, setBookings] = useState([]);
  const [loading, setLoading] = useState(true);
  const [notificationLoading, setNotificationLoading] = useState(false);
  
  // Map modal states
  const [mapModalOpen, setMapModalOpen] = useState(false);
  const [selectedBookingForMap, setSelectedBookingForMap] = useState(null);

  // Debug function to check notifications
  const checkNotifications = async () => {
    setNotificationLoading(true);
    try {
      const transporterId = user?.sub;
      console.log('üîç Checking notifications for transporter:', transporterId);
      console.log('üîç Transporter ID type:', typeof transporterId);
      
      const response = await axios.get(`http://localhost:5000/api/notifications/${transporterId}`);
      console.log('üìã All transporter notifications:', response.data);
      
      const unreadResponse = await axios.get(`http://localhost:5000/api/notifications/unread/${transporterId}`);
      console.log('üîî Unread count:', unreadResponse.data.unreadCount);
      
      // Show the latest 3 notifications
      const latest = response.data.slice(0, 3);
      console.log('üìÑ Latest 3 notifications:', latest);
      
      // Check specifically for vehicle bookings
      const vehicleBookings = response.data.filter(n => n.type === 'vehicle_booked');
      console.log('üöö Vehicle booking notifications:', vehicleBookings);
      
      if (response.data.length === 0) {
        alert(`No notifications found for transporter ID: ${transporterId}. Try booking a vehicle from merchant account first.`);
      } else {
        alert(`Found ${response.data.length} notifications (${unreadResponse.data.unreadCount} unread). Vehicle bookings: ${vehicleBookings.length}. Check console for details.`);
      }
    } catch (error) {
      console.error('‚ùå Error checking notifications:', error);
      alert('Failed to check notifications');
    } finally {
      setNotificationLoading(false);
    }
  };

  useEffect(() => {
    const fetchBookings = async () => {
      setLoading(true);
      try {
        const data = await getBookingsForTransporter(user.sub);
        setBookings(data);
      } catch (error) {
        console.error('Error fetching bookings:', error);
      } finally {
        setLoading(false);
      }
    };
    if (user?.sub) fetchBookings();
  }, [user]);

  // Function to extract pickup locations for map
  const getPickupLocationsForMap = (booking) => {
    const pickupLocations = [];
    
    // Check if booking has selectedItems data (the preferred structure)
    if (booking.selectedItems && Array.isArray(booking.selectedItems)) {
      booking.selectedItems.forEach((selectedItem, index) => {
        const itemName = selectedItem.name || selectedItem.item || selectedItem.productName || 'Selected item';
        const location = selectedItem.location || selectedItem.pickupLocation || 'Location not available';
        pickupLocations.push(`${index + 1}. ${itemName} - ${location}`);
      });
    } else if (booking.items && booking.startLocation) {
      const items = booking.items.split(/[,]/).map(item => item.trim()).filter(item => item);
      
      if (booking.startLocation.includes('Multiple Pickup Locations:')) {
        const locationLines = booking.startLocation
          .replace('Multiple Pickup Locations:\n', '')
          .split('\n')
          .filter(line => line.trim());
        
        locationLines.forEach(line => {
          if (line.includes('. ') && line.includes(' - ')) {
            pickupLocations.push(line);
          }
        });
      } else {
        items.forEach((item, index) => {
          pickupLocations.push(`${index + 1}. ${item} - ${booking.startLocation || 'Location not available'}`);
        });
      }
    } else {
      pickupLocations.push('1. Selected item - Location not available');
    }
    
    return pickupLocations;
  };

  // Function to open map modal
  const openMapModal = (booking) => {
    setSelectedBookingForMap(booking);
    setMapModalOpen(true);
  };

  // Function to close map modal
  const closeMapModal = () => {
    setMapModalOpen(false);
    setSelectedBookingForMap(null);
  };

  // Function to open Google Maps with route
  const openGoogleMaps = (startLocation, endLocation) => {
    if (!startLocation || !endLocation) {
      alert('Start or end location is missing');
      return;
    }

    // Check if we have structured pickup location data
    if (startLocation.includes('Multiple Pickup Locations:')) {
      const locationLines = startLocation
        .replace('Multiple Pickup Locations:\n', '')
        .split('\n')
        .filter(line => line.trim());
      
      const actualLocations = [];
      locationLines.forEach(line => {
        if (line.includes(' - ') && !line.includes('Location not available')) {
          const parts = line.split(' - ');
          if (parts.length >= 2) {
            const location = parts.slice(1).join(' - ');
            if (location && location !== 'Location not available') {
              actualLocations.push(location.trim());
            }
          }
        }
      });
      
      if (actualLocations.length === 0) {
        alert('No valid pickup locations available');
        return;
      } else if (actualLocations.length === 1) {
        const mapsUrl = `https://www.google.com/maps/dir/${encodeURIComponent(actualLocations[0])}/${encodeURIComponent(endLocation)}`;
        window.open(mapsUrl, '_blank');
      } else {
        const origin = encodeURIComponent(actualLocations[0]);
        const destination = encodeURIComponent(endLocation);
        const waypoints = actualLocations.slice(1).map(loc => encodeURIComponent(loc)).join('|');
        
        const mapsUrl = `https://www.google.com/maps/dir/${origin}/${waypoints}/${destination}`;
        window.open(mapsUrl, '_blank');
      }
    } else {
      const mapsUrl = `https://www.google.com/maps/dir/${encodeURIComponent(startLocation)}/${encodeURIComponent(endLocation)}`;
      window.open(mapsUrl, '_blank');
    }
  };

  // Function to open individual pickup location in Google Maps
  const openLocationInMaps = (location) => {
    if (!location || location === 'Location not available') {
      alert('Location not available');
      return;
    }
    const mapsUrl = `https://www.google.com/maps/search/${encodeURIComponent(location)}`;
    window.open(mapsUrl, '_blank');
  };

  // Function to handle booking rejection
  const handleRejectBooking = async (bookingId) => {
    if (!window.confirm('Are you sure you want to reject this booking?')) {
      return;
    }
    
    try {
      alert('Booking rejection functionality will be implemented');
      console.log('Rejecting booking:', bookingId);
    } catch (error) {
      console.error('Error rejecting booking:', error);
      alert('Failed to reject booking. Please try again.');
    }
  };

  const getStatusChip = (status) => {
    const statusConfig = {
      'pending': { color: 'warning', label: 'Pending', icon: <ScheduleIcon /> },
      'confirmed': { color: 'success', label: 'Confirmed', icon: <CheckIcon /> },
      'completed': { color: 'primary', label: 'Completed', icon: <CheckIcon /> },
      'cancelled': { color: 'error', label: 'Cancelled', icon: <ScheduleIcon /> }
    };
    
    const config = statusConfig[status] || statusConfig['pending'];
    return (
      <Chip 
        icon={config.icon}
        label={config.label}
        color={config.color}
        size="small"
        variant="outlined"
      />
    );
  };

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Paper elevation={3} sx={{ borderRadius: 3, overflow: 'hidden' }}>
        {/* Header */}
        <Box sx={{ 
          background: 'linear-gradient(135deg, #1976d2 0%, #1565c0 100%)',
          color: 'white',
          p: 4
        }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap', gap: 2 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <Avatar sx={{ bgcolor: 'rgba(255,255,255,0.2)', width: 56, height: 56 }}>
                <TruckIcon fontSize="large" />
              </Avatar>
              <Box>
                <Typography variant="h4" fontWeight={700} gutterBottom>
                  Vehicle Bookings
                </Typography>
                <Typography variant="subtitle1" sx={{ opacity: 0.9 }}>
                  Manage your transport booking requests
                </Typography>
              </Box>
            </Box>
            
            <Button
              variant="contained"
              onClick={checkNotifications}
              disabled={notificationLoading}
              startIcon={notificationLoading ? <CircularProgress size={20} color="inherit" /> : <NotificationsIcon />}
              sx={{
                bgcolor: 'rgba(255,255,255,0.2)',
                backdropFilter: 'blur(10px)',
                border: '1px solid rgba(255,255,255,0.3)',
                '&:hover': {
                  bgcolor: 'rgba(255,255,255,0.3)',
                },
                minWidth: 180
              }}
            >
              {notificationLoading ? 'Checking...' : 'Check Notifications'}
            </Button>
          </Box>
          
          {/* Stats */}
          <Grid container spacing={4} sx={{ mt: 2 }}>
            <Grid item xs={12} sm={4}>
              <Box sx={{ 
                textAlign: 'center',
                p: 2,
                borderRadius: 2,
                bgcolor: 'rgba(255,255,255,0.1)',
                backdropFilter: 'blur(5px)'
              }}>
                <Typography variant="h3" fontWeight={700}>
                  {bookings.length}
                </Typography>
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  Total Bookings
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Box sx={{ 
                textAlign: 'center',
                p: 2,
                borderRadius: 2,
                bgcolor: 'rgba(255,255,255,0.1)',
                backdropFilter: 'blur(5px)'
              }}>
                <Typography variant="h3" fontWeight={700}>
                  {bookings.filter(b => b.status === 'confirmed').length}
                </Typography>
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  Confirmed
                </Typography>
              </Box>
            </Grid>
            <Grid item xs={12} sm={4}>
              <Box sx={{ 
                textAlign: 'center',
                p: 2,
                borderRadius: 2,
                bgcolor: 'rgba(255,255,255,0.1)',
                backdropFilter: 'blur(5px)'
              }}>
                <Typography variant="h3" fontWeight={700}>
                  {bookings.filter(b => b.status === 'pending').length}
                </Typography>
                <Typography variant="body2" sx={{ opacity: 0.9 }}>
                  Pending
                </Typography>
              </Box>
            </Grid>
          </Grid>
        </Box>

        {/* Content */}
        <Box sx={{ p: 4 }}>
          {loading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', py: 8 }}>
              <CircularProgress size={60} />
              <Typography variant="h6" sx={{ ml: 2, color: 'text.secondary' }}>
                Loading bookings...
              </Typography>
            </Box>
          ) : bookings.length === 0 ? (
            <Box sx={{ 
              textAlign: 'center', 
              py: 8,
              background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
              borderRadius: 3,
              color: 'text.secondary'
            }}>
              <BookingIcon sx={{ fontSize: 80, mb: 2, opacity: 0.5 }} />
              <Typography variant="h5" gutterBottom fontWeight={600}>
                No Bookings Found
              </Typography>
              <Typography variant="body1" sx={{ maxWidth: 400, mx: 'auto' }}>
                You don't have any vehicle bookings yet. When merchants book your vehicles, they'll appear here.
              </Typography>
            </Box>
          ) : (
            <Box>
              {bookings.map((booking, index) => (
                <Box key={booking._id} sx={{ mb: 3 }}>
                  <Fade in={true} timeout={300 + index * 100}>
                    <Card 
                      elevation={2}
                      sx={{ 
                        borderRadius: 3,
                        border: '1px solid #e0e0e0',
                        transition: 'all 0.3s ease',
                        '&:hover': {
                          transform: 'translateY(-2px)',
                          boxShadow: '0 8px 25px rgba(0,0,0,0.15)',
                          borderColor: '#1976d2'
                        }
                      }}
                    >
                      <CardContent sx={{ p: 3 }}>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 3 }}>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flex: 1 }}>
                            <Avatar sx={{ bgcolor: '#1976d2', width: 48, height: 48 }}>
                              <PersonIcon />
                            </Avatar>
                            <Box sx={{ flex: 1 }}>
                              <Typography variant="h6" fontWeight={600} color="primary">
                                {booking.merchantDetails?.name || booking.merchantName || 'Merchant'}
                              </Typography>
                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mt: 0.5 }}>
                                <PhoneIcon sx={{ fontSize: 16, color: 'text.secondary' }} />
                                <Typography variant="body2" color="text.secondary">
                                  {booking.merchantDetails?.phone || booking.merchantPhone || 'No phone provided'}
                                </Typography>
                              </Box>
                              {booking.merchantDetails?.email && (
                                <Typography variant="body2" color="text.secondary" sx={{ mt: 0.5 }}>
                                  {booking.merchantDetails.email}
                                </Typography>
                              )}
                            </Box>
                          </Box>
                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                            {getStatusChip(booking.status || 'pending')}
                          </Box>
                        </Box>

                        <Divider sx={{ my: 2 }} />

                        <Grid container spacing={3}>
                          {/* Route Information - Full Width First Row */}
                          <Grid item xs={12}>
                            <Box sx={{ 
                              p: 3, 
                              bgcolor: 'rgba(25, 118, 210, 0.05)', 
                              borderRadius: 2,
                              border: '1px solid rgba(25, 118, 210, 0.1)'
                            }}>
                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                                <RouteIcon color="primary" />
                                <Typography variant="subtitle1" fontWeight={600} color="primary">
                                  Route Details
                                </Typography>
                              </Box>
                              
                              {/* Start Locations - Handle multiple locations */}
                              <Box sx={{ mb: 2 }}>
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
                                  <LocationIcon sx={{ fontSize: 16, color: '#4caf50' }} />
                                  <Typography variant="body2" sx={{ fontWeight: 600 }}>
                                    <strong>Pick-up Locations:</strong>
                                  </Typography>
                                </Box>
                                {(() => {
                                  // Create pickup locations for selected items only
                                  const pickupLocations = getPickupLocationsForMap(booking);
                                  
                                  return pickupLocations.map((locationInfo, index) => (
                                    <Box 
                                      key={index}
                                      sx={{ 
                                        display: 'flex',
                                        alignItems: 'center',
                                        gap: 1,
                                        ml: 2, 
                                        mb: 0.5,
                                        pl: 2,
                                        py: 0.5,
                                        borderLeft: '2px solid #4caf50',
                                        backgroundColor: index % 2 === 0 ? 'rgba(76, 175, 80, 0.05)' : 'transparent',
                                        borderRadius: '4px',
                                      }}
                                    >
                                      <Typography 
                                        variant="body2" 
                                        sx={{ 
                                          flex: 1,
                                          wordWrap: 'break-word',
                                          whiteSpace: 'normal'
                                        }}
                                        title={locationInfo}
                                      >
                                        {locationInfo}
                                      </Typography>
                                      <Button
                                        size="small"
                                        variant="outlined"
                                        startIcon={<OpenIcon />}
                                        onClick={() => {
                                          const location = locationInfo.split(' - ')[1];
                                          openLocationInMaps(location);
                                        }}
                                        sx={{ 
                                          minWidth: 'auto',
                                          px: 1,
                                          fontSize: '0.75rem'
                                        }}
                                      >
                                        Maps
                                      </Button>
                                    </Box>
                                  ));
                                })()}
                              </Box>

                              {/* End Location */}
                              <Box>
                                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                  <LocationIcon sx={{ fontSize: 16, color: '#f44336' }} />
                                  <Typography variant="body2">
                                    <strong>Destination:</strong> {booking.endLocation || 'Not specified'}
                                  </Typography>
                                </Box>
                              </Box>
                            </Box>
                          </Grid>

                          {/* Harvest Details - Full Width Second Row */}
                          <Grid item xs={12}>
                            <Box sx={{ 
                              p: 3, 
                              bgcolor: 'rgba(76, 175, 80, 0.05)', 
                              borderRadius: 2,
                              border: '1px solid rgba(76, 175, 80, 0.1)'
                            }}>
                              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>
                                <InventoryIcon color="success" />
                                <Typography variant="subtitle1" fontWeight={600} color="success.main">
                                  Harvest Details
                                </Typography>
                              </Box>
                              
                              <Grid container spacing={2}>
                                <Grid item xs={12} sm={6}>
                                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                    <InventoryIcon sx={{ fontSize: 18, color: 'text.secondary' }} />
                                    <Typography variant="body2">
                                      <strong>Items:</strong> {booking.items || 'Not specified'}
                                    </Typography>
                                  </Box>
                                </Grid>
                                <Grid item xs={12} sm={6}>
                                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                    <WeightIcon sx={{ fontSize: 18, color: 'text.secondary' }} />
                                    <Typography variant="body2">
                                      <strong>Weight:</strong> {booking.weight || 'N/A'} Kg
                                    </Typography>
                                  </Box>
                                </Grid>
                              </Grid>
                            </Box>
                          </Grid>
                        </Grid>

                        {/* Actions */}
                        <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mt: 3 }}>
                          <Button 
                            variant="outlined"
                            color="primary"
                            startIcon={<MapIcon />}
                            onClick={() => openMapModal(booking)}
                            sx={{ minWidth: 160 }}
                          >
                            View on Map
                          </Button>
                          <Button 
                            variant="outlined"
                            color="primary"
                            startIcon={<RouteIcon />}
                            onClick={() => openGoogleMaps(booking.startLocation, booking.endLocation)}
                            sx={{ minWidth: 160 }}
                          >
                            Open Route
                          </Button>
                          <Button 
                            variant="outlined"
                            color="error"
                            startIcon={<RejectIcon />}
                            onClick={() => handleRejectBooking(booking._id)}
                            sx={{ minWidth: 160 }}
                          >
                            Reject Booking
                          </Button>
                          <Button 
                            variant="contained" 
                            color="success"
                            startIcon={<CheckIcon />}
                            sx={{ minWidth: 160 }}
                          >
                            Accept Booking
                          </Button>
                        </Box>
                      </CardContent>
                    </Card>
                  </Fade>
                </Box>
              ))}
            </Box>
          )}
        </Box>
      </Paper>

      {/* Map Modal */}
      <PickupLocationsMapModal
        open={mapModalOpen}
        onClose={closeMapModal}
        pickupLocations={selectedBookingForMap ? getPickupLocationsForMap(selectedBookingForMap) : []}
        title={`Pickup Locations - ${selectedBookingForMap?.merchantDetails?.name || selectedBookingForMap?.merchantName || 'Merchant'}`}
      />
    </Container>
  );
};

export default Bookings;
